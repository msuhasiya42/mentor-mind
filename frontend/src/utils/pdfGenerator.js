import jsPDF from 'jspdf';

/**
 * Generate a PDF document from learning path data
 * @param {Object} data - Learning path data with topic and resources
 * @returns {void} - Downloads the PDF file
 */
export const generatePDF = (data) => {
  try {
    const { topic, learning_path } = data;

    // Create new PDF document
    const doc = new jsPDF();

    // Set up styling
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (2 * margin);
    let yPosition = margin;

    // Helper function to add new page if needed
    const checkPageBreak = (requiredSpace = 20) => {
      if (yPosition + requiredSpace > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
        return true;
      }
      return false;
    };

    // Title
    doc.setFontSize(24);
    doc.setTextColor(0, 0, 0); // Black color
    doc.text('Learning Path', margin, yPosition);
    yPosition += 10;

    // Topic
    doc.setFontSize(18);
    doc.setTextColor(0, 0, 0);
    const topicLines = doc.splitTextToSize(topic, contentWidth);
    doc.text(topicLines, margin, yPosition);
    yPosition += (topicLines.length * 8) + 5;

    // Generated date
    doc.setFontSize(10);
    doc.setTextColor(120, 120, 120);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition);
    yPosition += 15;

    // Line separator
    doc.setDrawColor(220, 220, 220);
    doc.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // Helper function to add section
    const addSection = (title, resources, emoji) => {
      if (!resources || resources.length === 0) return;

      checkPageBreak(30);

      // Section title
      doc.setFontSize(16);
      doc.setTextColor(0, 0, 0);
      doc.text(`${emoji} ${title}`, margin, yPosition);
      yPosition += 10;

      // Resources
      doc.setFontSize(11);
      resources.forEach((resource, index) => {
        checkPageBreak(25);

        // Resource number
        doc.setTextColor(0, 0, 0);
        doc.setFont(undefined, 'bold');
        doc.text(`${index + 1}. ${resource.title}`, margin + 5, yPosition);
        yPosition += 6;

        // Description
        if (resource.description) {
          doc.setFont(undefined, 'normal');
          doc.setTextColor(80, 80, 80);
          const descLines = doc.splitTextToSize(resource.description, contentWidth - 10);
          doc.text(descLines, margin + 5, yPosition);
          yPosition += descLines.length * 5;
        }

        // URL
        doc.setFont(undefined, 'normal');
        doc.setTextColor(0, 0, 0);
        doc.textWithLink('View Resource', margin + 5, yPosition, { url: resource.url });
        doc.setTextColor(100, 100, 100);
        doc.setFontSize(9);
        const urlLines = doc.splitTextToSize(resource.url, contentWidth - 10);
        doc.text(urlLines, margin + 5, yPosition + 4);
        yPosition += (urlLines.length * 4) + 8;

        // Platform badge
        if (resource.platform) {
          doc.setFontSize(9);
          doc.setTextColor(120, 120, 120);
          doc.text(`Platform: ${resource.platform}`, margin + 5, yPosition);
          yPosition += 5;
        }

        yPosition += 5;
      });

      yPosition += 5;
    };

    // Add all sections
    addSection('Documentation & Official Guides', learning_path.docs, 'üìö');
    addSection('Blogs & Articles', learning_path.blogs, '‚úçÔ∏è');
    addSection('YouTube Videos', learning_path.youtube, 'üé¨');
    addSection('Free Courses', learning_path.free_courses, 'üéì');

    // Footer on all pages
    const totalPages = doc.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(160, 160, 160);
      doc.text(
        `Generated by Mentor Mind | Page ${i} of ${totalPages}`,
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
    }

    // Save the PDF
    const fileName = `${topic.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_learning_path.pdf`;
    doc.save(fileName);

    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
};
