import { Document, Paragraph, TextRun, HeadingLevel, AlignmentType, ExternalHyperlink, Packer } from 'docx';
import { saveAs } from 'file-saver';

/**
 * Generate a DOC document from learning path data
 * @param {Object} data - Learning path data with topic and resources
 * @returns {Promise<void>} - Downloads the DOC file
 */
export const generateDOC = async (data) => {
  try {
    const { topic, learning_path } = data;

    // Build document sections
    const sections = [];

    // Title and header
    sections.push(
      new Paragraph({
        text: 'Learning Path',
        heading: HeadingLevel.TITLE,
        alignment: AlignmentType.CENTER,
        spacing: { after: 200 },
      }),
      new Paragraph({
        text: topic,
        heading: HeadingLevel.HEADING_1,
        alignment: AlignmentType.CENTER,
        spacing: { after: 300 },
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `Generated on: ${new Date().toLocaleDateString()}`,
            italics: true,
            color: '999999',
          }),
        ],
        alignment: AlignmentType.CENTER,
        spacing: { after: 400 },
      })
    );

    // Helper function to add section
    const addSection = (title, resources, emoji) => {
      if (!resources || resources.length === 0) return;

      // Section heading
      sections.push(
        new Paragraph({
          text: `${emoji} ${title}`,
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 400, after: 200 },
        })
      );

      // Resources
      resources.forEach((resource, index) => {
        // Resource title with numbering
        sections.push(
          new Paragraph({
            children: [
              new TextRun({
                text: `${index + 1}. ${resource.title}`,
                bold: true,
                size: 24,
              }),
            ],
            spacing: { before: 200, after: 100 },
          })
        );

        // Description
        if (resource.description) {
          sections.push(
            new Paragraph({
              text: resource.description,
              spacing: { after: 100 },
            })
          );
        }

        // URL
        sections.push(
          new Paragraph({
            children: [
              new TextRun({
                text: 'Link: ',
                bold: true,
              }),
              new ExternalHyperlink({
                children: [
                  new TextRun({
                    text: resource.url,
                    style: 'Hyperlink',
                    color: '000000',
                    underline: {},
                  }),
                ],
                link: resource.url,
              }),
            ],
            spacing: { after: 100 },
          })
        );

        // Platform
        if (resource.platform) {
          sections.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: `Platform: ${resource.platform}`,
                  italics: true,
                  color: '666666',
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            })
          );
        }
      });
    };

    // Add all sections
    addSection('Documentation & Official Guides', learning_path.docs, 'üìö');
    addSection('Blogs & Articles', learning_path.blogs, '‚úçÔ∏è');
    addSection('YouTube Videos', learning_path.youtube, 'üé¨');
    addSection('Free Courses', learning_path.free_courses, 'üéì');

    // Footer
    sections.push(
      new Paragraph({
        text: '\nGenerated by Mentor Mind - AI-Powered Learning Paths',
        alignment: AlignmentType.CENTER,
        spacing: { before: 600 },
        children: [
          new TextRun({
            text: '\nGenerated by Mentor Mind - AI-Powered Learning Paths',
            italics: true,
            color: 'AAAAAA',
            size: 18,
          }),
        ],
      })
    );

    // Create document
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: sections,
        },
      ],
    });

    // Generate and save the document
    const blob = await Packer.toBlob(doc);
    const fileName = `${topic.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_learning_path.docx`;
    saveAs(blob, fileName);

    return true;
  } catch (error) {
    console.error('Error generating DOC:', error);
    throw new Error('Failed to generate DOC file. Please try again.');
  }
};
